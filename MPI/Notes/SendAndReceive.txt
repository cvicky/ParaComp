
http://mpitutorial.com/tutorials/mpi-send-and-receive/

MPI Send and Receive

-almost every single function in MPI can be implemented with basic send and receive calls

Overview:
-blocking and receiving functions
-other basic concepts associated with transmitting data using MPI

Sending and Receiving
-first, process A decides a message needs to be sent to process B
-process A then packs all of its necessary data into a buffer for process B
	-buffers are often referred to as envelopes (messages are packed into them)
-after data is packed into buffer, the communication device (network) is responsible for routing the message to proper location
	-location of message is defined by process’s rank

-even though message is routed to B, process B still needs to acknowledge that it wants to receive A’s data in the first place (YEA, CONSENT)
-once B acknowledges that it wants to receive A’s data, the data has been transmitted 
	-data may even go back and forth

-sometimes A might have to send different types of messages to B
-instead of B having to differentiate all these messages, MPI allows sender and receivers to specify message IDs (aka tags)
-when process B requests a message with a certain tag number, messages with different tags will be buffered by the network until B is ready for them

Functions:

MPI_Send(
    void* data,
    int count,
    MPI_Datatype datatype,
    int destination,
    int tag,
    MPI_Comm communicator)

MPI_Recv(
    void* data,
    int count,
    MPI_Datatype datatype,
    int source,
    int tag,
    MPI_Comm communicator,
    MPI_Status* status)

-first arg is the data buffer
-2nd and 3rd are the count and type of elements that reside in the butter
-MPI_Send will send the exact count of elements
-MPI_Recv will receive AT MOST the count of elements
-4th and 5th args specify the rank of the sending/receiving process and the tag of the message
-6th arg specifies the communicator
-last arg (for MPI_Recv ONLY) provides info about the received message

Elementary MPI datatypes

MPI datatype		C equivalent
MPI_SHORT		short int
MPI_INT			int
MPI_LONG		long int
MPI_LONG_LONG		long long int
MPI_UNSIGNED_CHAR	unsigned char
MPI_UNSIGNED_SHORT	unsigned short int
MPI_UNSIGNED		unsigned int
MPI_UNSIGNED_LONG	unsigned long int
MPI_UNSIGNED_LONG_LONG	unsigned long long int
MPI_FLOAT		float
MPI_DOUBLE		double
MPI_LONG_DOUBLE		long double
MPI_BYTE		char

MPI send/recv program
————————————————————————————————
// Find out rank, size
int world_rank;
MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);
int world_size;
MPI_Comm_size(MPI_COMM_WORLD, &world_size);

int number;
if (world_rank == 0) {
    number = -1;
    MPI_Send(&number, 1, MPI_INT, 1, 0, MPI_COMM_WORLD);
} else if (world_rank == 1) {
    MPI_Recv(&number, 1, MPI_INT, 0, 0, MPI_COMM_WORLD,
             MPI_STATUS_IGNORE);
    printf("Process 1 received number %d from process 0\n",
           number);
}
//output: Process 1 received number -1 from process 0
—————————————————————————————

-MPI_Comm_rank is used to determine the rank of the process
-MPI_Comm_size is used to determine the world size 
-then the process zero initializes a number to the value of -1 and send this value to process one 

MPI Ping Pong Program




